import sys
import base64
import os
from io import BytesIO
from pprint import pformat
import json
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import uvicorn
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    BaseDocTemplate, Frame, PageTemplate, Paragraph, Spacer,
    Image, Table, TableStyle
)
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import cm


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ ===
def register_font(path, name, default):
    try:
        if os.path.exists(path):
            pdfmetrics.registerFont(TTFont(name, path))
            return name
        else:
            return default
    except Exception:
        return default

FONT_NAME = register_font("./fonts/DejaVuSans.ttf", "DejaVuSans", "Helvetica")
FONT_NAME_MONO = register_font("./fonts/DejaVuSansMono.ttf", "DejaVuSansMono", "Courier")
FONT_NAME_MONO_BOLD = register_font("./fonts/DejaVuSansMono-Bold.ttf", "DejaVuSansMonoBold", "Courier")
PAGE_WIDTH, PAGE_HEIGHT = A4

# === –°—Ç–∏–ª–∏ ===
styles = getSampleStyleSheet()
style_normal = ParagraphStyle(
    'StyleNormal',
    parent=styles["Normal"],
    fontName=FONT_NAME,
    # fontSize=10,
    # leading=14
)
style_h1 = ParagraphStyle(
    'StyleH1',
    parent=styles["Heading1"],
    fontName=FONT_NAME,
    # fontSize=16,
    # leading=20,
    alignment=1,
    spaceAfter=18,
    textColor=(0.3, 0.3, 0.3)
)
style_mono = ParagraphStyle(
    'StyleMono',
    parent=style_normal,
    fontSize=8,
    fontName=FONT_NAME_MONO,
    textColor=(0.2, 0.2, 0.6),
)
style_mono_header = ParagraphStyle(
    'StyleMonoHeader',
    parent=style_mono,
    fontName=FONT_NAME_MONO_BOLD,
    textColor=colors.black,
)

# === –ö–ª–∞—Å—Å –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü ===
class NumberedCanvas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        total_pages = len(self._saved_page_states)
        for state in self._saved_page_states:
            self.__dict__.update(state)
            self.draw_page_number(total_pages)
            super().showPage()
        super().save()

    def draw_page_number(self, total):
        page = self._pageNumber
        self.setFont(FONT_NAME, 9)
        self.setFillColor(colors.gray)
        text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total} "
        self.drawCentredString(PAGE_WIDTH / 2.0, 1 * cm, text)

# === –ö–æ–ª–æ–Ω—Ç–∏—Ç—É–ª ===
def footer(canvas_obj: canvas.Canvas, doc):
    pass

# === –®–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
def create_page_template(doc):
    frame = Frame(doc.leftMargin, doc.bottomMargin, doc.width, doc.height, id="normal")
    return PageTemplate(id="template", frames=[frame], onPage=footer)

# === –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–ª–æ–∫ ===
def add_debug_block(story, title, value, doc):
    story.append(Paragraph(f"<b>{title}</b>", style_mono_header))
    if isinstance(value, str):
        formatted = value
    else:
        formatted = ''.join(pformat(value, width=90, compact=False))
    for line in formatted.splitlines():
        story.append(Paragraph(line.replace(" ", "&nbsp;"), style_mono))

    story.append(Spacer(1, 4))
    line = Table([[""]], colWidths=[PAGE_WIDTH - 2 * doc.leftMargin], rowHeights=[0.5])
    line.setStyle(TableStyle([("LINEABOVE", (0, 0), (-1, -1), 0.5, colors.lightgrey)]))
    story.append(line)
    story.append(Spacer(1, 8))


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF ===
def generate_pdf(request_headers, request_body):
    buffer = BytesIO()
    doc = BaseDocTemplate(buffer, pagesize=A4)
    doc.addPageTemplates([create_page_template(doc)])
    story = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    story.append(Paragraph("–ü—Ä–∏–≤–µ—Ç!", style_h1))
    story.append(Spacer(1, 12))

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image("cats.png", width=7 * cm, height=5 * cm)
    center_text = Paragraph("–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.<br/><br/>"
                            "–ù–æ —Ä–∞–∑ —É–∂ –≤—ã –∑–¥–µ—Å—å...<br/>"
                            "–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, —ç—Ç–æ –º–æ–∏ –∫–æ—Ç–∏–∫–∏.<br/>"
                            "–°–ª–µ–≤–∞ –ö–æ—Ç–∏–∫, —Å–ø—Ä–∞–≤–∞ –ö–∏—Å—É–ª—è.<br/><br/>"
                            "–ê –≤–Ω–∏–∑—É –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è<br/>–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 
                            style=style_normal)
    table = Table(
        [[center_text, image]],
        colWidths=[(PAGE_WIDTH - 2 * doc.leftMargin) / 2] * 2,
    )
    table.setStyle(TableStyle([
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
        ("LEFTPADDING", (0, 0), (-1, -1), 4),
        ("RIGHTPADDING", (0, 0), (-1, -1), 4),
    ]))
    story.append(table)
    story.append(Spacer(1, 20))

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    add_debug_block(story, "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", request_headers, doc)

    # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    add_debug_block(story, "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞", request_body, doc)

    # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ JSON
    try:
        request_json = json.loads(request_body)
    except Exception as e:
        request_json = f"–£–≤—ã, —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É JSON. {e}"
    add_debug_block(story, "–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ JSON", request_json, doc)

    doc.build(story, canvasmaker=NumberedCanvas)
    pdf_data = buffer.getvalue()
    buffer.close()
    return pdf_data


# === –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
example_headers = {
    'accept': '*/*',
    'content-length': '20',
    'content-type': 'application/json',
    'host': '127.0.0.1:8000',
    'user-agent': 'curl/8.7.1'
}
example_body = """{
    "parameters": {
        "length": 10,
        "width": 12
    },
    "messages": [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –≥–ª—É–ø—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–ø—É—Å—Ç—É—é –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è."
        },
        {
            "role": "user",
            "content": "–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ –∏ –∑–∞–¥–∞–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."
        },
        {
            "role": "assistant",
            "content": "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–æ—á–µ–º—É –∫–æ—Ä–æ–≤—ã —É—Ç—Ä–∞—Ç–∏–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–µ—Ç–∞—Ç—å?"
        }
    ],
    "scalar": 42
}"""


# === FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI(title="Mock PDF Generator")

@app.post("/")
async def generate_endpoint(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    request_body = await request.body()

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    request_headers = dict(request.headers)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    response_payload = {
        "status": 200,
        "info": ["PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"],
        "errors": []
    }

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    headers_out = {"content-type": "application/json"}

    pdf_data = generate_pdf(
        request_headers=request_headers,
        request_body=request_body
    )
    response_payload["document"] = base64.b64encode(pdf_data).decode("utf-8")
    return JSONResponse(response_payload, headers=headers_out)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    if "--debug" in sys.argv:
        print("üß© –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞—ë–º PDF...")
        pdf_data = generate_pdf(example_headers, example_body)
        with open("example.pdf", "wb") as f:
            f.write(pdf_data)
        print("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ example.pdf")
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–∏—Å–∞...")
        uvicorn.run("mock_pdf_generator:app", host="0.0.0.0", port=8000)
